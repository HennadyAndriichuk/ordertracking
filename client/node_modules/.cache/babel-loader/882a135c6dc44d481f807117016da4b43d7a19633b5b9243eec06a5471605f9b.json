{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\order_tracking\\\\client\\\\src\\\\components\\\\metricsPage\\\\Metrics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\nimport { fetchApi } from '../../utils/backendApi';\nimport DisplayMetric from './DisplayMetric';\nimport { sumAllValues, calculateSumOfDifferences, calculateTotalDocumentSum } from '../../utils/calculate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [\"Прибыль доставленных\", \"Сумма всех заказов\", \"Прибыль доставленных без учета затрат\", \"Сумма затрат\", \"Номер телефона\", \"Себестоимость\"];\nconst DisplayMetrics = ({\n  userId\n}) => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [costs, setCosts] = useState([]);\n  const [metrics, setMetrics] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!userId) return;\n      try {\n        const [fetchedOrders, fetchedCosts] = await Promise.all([fetchApi('http://localhost:4000/orders/get-orders', 'POST', null, {\n          userId\n        }), fetchApi('http://localhost:4000/expenses/get-expenses', 'POST', null, {\n          userId\n        })]);\n        setOrders(fetchedOrders);\n        setCosts(fetchedCosts);\n      } catch (error) {\n        console.error('Ошибка при загрузке данных:', error);\n      }\n    };\n    fetchData();\n  }, [userId]);\n  useEffect(() => {\n    if (orders.length && costs.length) {\n      const totalCostsSum = sumAllValues(costs);\n      //const totalDocumentSum = calculateTotalDocumentSum(orders);\n      //const netProfit = calculateSumOfDifferences(orders, totalCostsSum);\n\n      console.log(costs);\n      setMetrics({\n        totalCostsSum,\n        totalDocumentSum,\n        netProfit\n      });\n    }\n  }, [orders, costs]);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: columns.map((column, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: column\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: Object.values(metrics).map((metric, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(DisplayMetric, {\n              value: metric\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(DisplayMetrics, \"zqufxKVwpCSBsC++RLEXBcHn2Xg=\");\n_c = DisplayMetrics;\nexport default DisplayMetrics;\nvar _c;\n$RefreshReg$(_c, \"DisplayMetrics\");","map":{"version":3,"names":["React","useState","useEffect","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","fetchApi","DisplayMetric","sumAllValues","calculateSumOfDifferences","calculateTotalDocumentSum","jsxDEV","_jsxDEV","columns","DisplayMetrics","userId","_s","orders","setOrders","costs","setCosts","metrics","setMetrics","fetchData","fetchedOrders","fetchedCosts","Promise","all","error","console","length","totalCostsSum","log","totalDocumentSum","netProfit","component","children","map","column","index","fileName","_jsxFileName","lineNumber","columnNumber","Object","values","metric","value","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/order_tracking/client/src/components/metricsPage/Metrics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\r\nimport { fetchApi } from '../../utils/backendApi';\r\nimport DisplayMetric from './DisplayMetric';\r\nimport { sumAllValues, calculateSumOfDifferences, calculateTotalDocumentSum } from '../../utils/calculate';\r\n\r\nconst columns = [\"Прибыль доставленных\", \"Сумма всех заказов\", \"Прибыль доставленных без учета затрат\", \"Сумма затрат\", \"Номер телефона\", \"Себестоимость\"];\r\n\r\nconst DisplayMetrics = ({userId}) => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [costs, setCosts] = useState([]);\r\n  const [metrics, setMetrics] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!userId) return; \r\n      try {\r\n        const [fetchedOrders, fetchedCosts] = await Promise.all([\r\n          fetchApi('http://localhost:4000/orders/get-orders', 'POST', null, { userId }),\r\n          fetchApi('http://localhost:4000/expenses/get-expenses', 'POST', null, { userId })\r\n        ]);\r\n\r\n        setOrders(fetchedOrders);\r\n        setCosts(fetchedCosts);\r\n      } catch (error) {\r\n        console.error('Ошибка при загрузке данных:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [userId]);\r\n\r\n  useEffect(() => {\r\n    if (orders.length && costs.length) {\r\n      const totalCostsSum = sumAllValues(costs);\r\n      //const totalDocumentSum = calculateTotalDocumentSum(orders);\r\n      //const netProfit = calculateSumOfDifferences(orders, totalCostsSum);\r\n\r\n      console.log(costs);\r\n\r\n      setMetrics({\r\n        totalCostsSum,\r\n        totalDocumentSum,\r\n        netProfit,\r\n      });\r\n    }\r\n  }, [orders, costs]);\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {columns.map((column, index) => (\r\n              <TableCell key={index}>{column}</TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          <TableRow>\r\n            {Object.values(metrics).map((metric, index) => (\r\n              <TableCell key={index}>\r\n                <DisplayMetric value={metric} />\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default DisplayMetrics;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}