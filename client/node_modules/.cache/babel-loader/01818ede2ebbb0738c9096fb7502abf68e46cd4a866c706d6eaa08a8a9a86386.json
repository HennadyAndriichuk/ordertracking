{"ast":null,"code":"const express = require('express');\nconst fs = require('fs');\nconst path = require('path');\nconst {\n  nanoid\n} = require('nanoid'); // Используем nanoid для генерации уникальных id\n\nconst ordersRouter = express.Router();\nconst ordersFilePath = path.join(__dirname, 'orders.json');\n\n// Function to read orders from the JSON file\nconst readOrders = () => {\n  try {\n    const data = fs.readFileSync(ordersFilePath, 'utf8');\n    return JSON.parse(data);\n  } catch (err) {\n    console.error(err);\n    return [];\n  }\n};\n\n// Function to write orders to the JSON file\nconst writeOrders = orders => {\n  try {\n    fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\n  } catch (err) {\n    console.error(err);\n  }\n};\n\n// Endpoint to handle POST requests\nordersRouter.post('/', (req, res) => {\n  const newOrder = {\n    id: nanoid(),\n    ...req.body\n  }; // Генерируем id для нового заказа\n  const orders = readOrders();\n  orders.push(newOrder);\n  writeOrders(orders);\n  res.status(201).send(newOrder);\n});\n\n// Endpoint to get all orders\nordersRouter.get('/', (req, res) => {\n  const orders = readOrders();\n  res.status(200).json(orders);\n});\n\n// Endpoint to delete an order by id\nordersRouter.delete('/:id', (req, res) => {\n  const orderId = req.params.id;\n  let orders = readOrders();\n  const initialLength = orders.length;\n  orders = orders.filter(order => order.id !== orderId);\n  if (orders.length === initialLength) {\n    return res.status(404).send({\n      error: 'Order not found'\n    });\n  }\n  writeOrders(orders);\n  res.status(200).json(orders); // Возвращаем полную информацию\n});\n\n// Endpoint to handle PATCH requests\nordersRouter.patch('/:id', (req, res) => {\n  const orderId = req.params.id;\n  const updatedFields = req.body;\n  let orders = readOrders();\n  const orderIndex = orders.findIndex(order => order.id === orderId);\n  if (orderIndex === -1) {\n    return res.status(404).send({\n      error: 'Order not found'\n    });\n  }\n  orders[orderIndex] = {\n    ...orders[orderIndex],\n    ...updatedFields\n  };\n  writeOrders(orders);\n  res.status(200).json(orders); // Возвращаем обновленный заказ\n});\nmodule.exports = ordersRouter;","map":{"version":3,"names":["express","require","fs","path","nanoid","ordersRouter","Router","ordersFilePath","join","__dirname","readOrders","data","readFileSync","JSON","parse","err","console","error","writeOrders","orders","writeFileSync","stringify","post","req","res","newOrder","id","body","push","status","send","get","json","delete","orderId","params","initialLength","length","filter","order","patch","updatedFields","orderIndex","findIndex","module","exports"],"sources":["C:/Users/admin/Desktop/магазины/order_tracking/client/src/utils/backendApi.js"],"sourcesContent":["const express = require('express');\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst { nanoid } = require('nanoid'); // Используем nanoid для генерации уникальных id\r\n\r\nconst ordersRouter = express.Router();\r\nconst ordersFilePath = path.join(__dirname, 'orders.json');\r\n\r\n// Function to read orders from the JSON file\r\nconst readOrders = () => {\r\n  try {\r\n    const data = fs.readFileSync(ordersFilePath, 'utf8');\r\n    return JSON.parse(data);\r\n  } catch (err) {\r\n    console.error(err);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Function to write orders to the JSON file\r\nconst writeOrders = (orders) => {\r\n  try {\r\n    fs.writeFileSync(ordersFilePath, JSON.stringify(orders, null, 2));\r\n  } catch (err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Endpoint to handle POST requests\r\nordersRouter.post('/', (req, res) => {\r\n  const newOrder = { id: nanoid(), ...req.body }; // Генерируем id для нового заказа\r\n  const orders = readOrders();\r\n  orders.push(newOrder);\r\n  writeOrders(orders);\r\n  res.status(201).send(newOrder);\r\n});\r\n\r\n// Endpoint to get all orders\r\nordersRouter.get('/', (req, res) => {\r\n  const orders = readOrders();\r\n  res.status(200).json(orders);\r\n});\r\n\r\n// Endpoint to delete an order by id\r\nordersRouter.delete('/:id', (req, res) => {\r\n  const orderId = req.params.id;\r\n  let orders = readOrders();\r\n  const initialLength = orders.length;\r\n  orders = orders.filter(order => order.id !== orderId);\r\n\r\n  if (orders.length === initialLength) {\r\n    return res.status(404).send({ error: 'Order not found' });\r\n  }\r\n\r\n  writeOrders(orders);\r\n  res.status(200).json(orders); // Возвращаем полную информацию\r\n});\r\n\r\n// Endpoint to handle PATCH requests\r\nordersRouter.patch('/:id', (req, res) => {\r\n  const orderId = req.params.id;\r\n  const updatedFields = req.body;\r\n  let orders = readOrders();\r\n  const orderIndex = orders.findIndex(order => order.id === orderId);\r\n\r\n  if (orderIndex === -1) {\r\n    return res.status(404).send({ error: 'Order not found' });\r\n  }\r\n\r\n  orders[orderIndex] = { ...orders[orderIndex], ...updatedFields };\r\n  writeOrders(orders);\r\n  res.status(200).json(orders); // Возвращаем обновленный заказ\r\n});\r\n\r\nmodule.exports = ordersRouter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}