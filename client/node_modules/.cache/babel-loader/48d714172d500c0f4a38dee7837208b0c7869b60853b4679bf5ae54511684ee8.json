{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\order_tracking\\\\client\\\\src\\\\components\\\\metricsPage\\\\Metrics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\nimport { fetchApi } from '../../utils/backendApi';\nimport DisplayMetric from './DisplayMetric';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DisplayMetrics = () => {\n  _s();\n  const columns = [\"Сумма всех заказов\", \"Прибыль доставленных\", \"Затраты\", \"Сумма документа\", \"Номер телефона\", \"Себестоимость\"];\n  const [orders, setOrders] = useState([]);\n  const [costs, setCosts] = useState([]);\n  const [metrics, setMetrics] = useState([]);\n  const fetchOrdersUrl = \"http://localhost:4000/orders\";\n  const fetchExpensesUrl = \"http://localhost:4000/expenses\";\n  useEffect(() => {\n    const fetchData = async () => {\n      const [fetchedOrders, fetchedCosts] = await Promise.all([fetchApi(fetchOrdersUrl, 'GET'), fetchApi(fetchExpensesUrl, 'GET')]);\n      setOrders(fetchedOrders);\n      setCosts(fetchedCosts);\n    };\n    fetchData();\n  }, []);\n  const sumAllValues = dataArray => {\n    if (dataArray.length === 0) return 0; // Проверка на пустой массив\n\n    return dataArray.reduce((totalSum, obj) => {\n      const {\n        id,\n        date,\n        ...rest\n      } = obj;\n      const sum = Object.values(rest).reduce((acc, value) => acc + Number(value), 0);\n      return totalSum + sum;\n    }, 0);\n  };\n  const calculateProfit = (ordersArray, costsArray) => {\n    if (ordersArray.length === 0 || costsArray.length === 0) return; // Проверка на пустые массивы\n\n    // Сумма всех заказов\n    const totalOrdersSum = ordersArray.reduce((total, order) => {\n      const documentSum = Number(order.documentSum);\n      return total + documentSum;\n    }, 0);\n\n    // Сумма всех себестоимостей заказов\n    const totalCostOfOrders = ordersArray.reduce((total, order) => {\n      const cost = Number(order.cost);\n      return total + cost;\n    }, 0);\n\n    // Сумма всех расходов\n    const totalCosts = sumAllValues(costsArray);\n\n    // Общая себестоимость\n    const totalOverallCost = totalCostOfOrders + totalCosts;\n\n    // Прибыль\n    const profit = totalOrdersSum - totalOverallCost;\n    setMetrics([totalOrdersSum, profit, totalCosts, totalOverallCost]);\n  };\n  useEffect(() => {\n    calculateProfit(orders, costs);\n  }, [orders, costs]);\n  console.log(metrics);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: columns.map((column, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: column\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: metrics.map((metric, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(DisplayMetric, {\n              value: metric\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n_s(DisplayMetrics, \"HbyaLhPbEMgd048huCNftk+HhuM=\");\n_c = DisplayMetrics;\nexport default DisplayMetrics;\nvar _c;\n$RefreshReg$(_c, \"DisplayMetrics\");","map":{"version":3,"names":["React","useState","useEffect","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","fetchApi","DisplayMetric","jsxDEV","_jsxDEV","DisplayMetrics","_s","columns","orders","setOrders","costs","setCosts","metrics","setMetrics","fetchOrdersUrl","fetchExpensesUrl","fetchData","fetchedOrders","fetchedCosts","Promise","all","sumAllValues","dataArray","length","reduce","totalSum","obj","id","date","rest","sum","Object","values","acc","value","Number","calculateProfit","ordersArray","costsArray","totalOrdersSum","total","order","documentSum","totalCostOfOrders","cost","totalCosts","totalOverallCost","profit","console","log","component","children","map","column","index","fileName","_jsxFileName","lineNumber","columnNumber","metric","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/order_tracking/client/src/components/metricsPage/Metrics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper } from '@mui/material';\r\nimport { fetchApi } from '../../utils/backendApi';\r\nimport DisplayMetric from './DisplayMetric';\r\n\r\nconst DisplayMetrics = () => {\r\n  const columns = [\"Сумма всех заказов\", \"Прибыль доставленных\", \"Затраты\", \"Сумма документа\", \"Номер телефона\", \"Себестоимость\"];\r\n  const [orders, setOrders] = useState([]);\r\n  const [costs, setCosts] = useState([]);\r\n  const [metrics, setMetrics] = useState([]);\r\n\r\n  const fetchOrdersUrl = \"http://localhost:4000/orders\";\r\n  const fetchExpensesUrl = \"http://localhost:4000/expenses\";\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const [fetchedOrders, fetchedCosts] = await Promise.all([\r\n        fetchApi(fetchOrdersUrl, 'GET'),\r\n        fetchApi(fetchExpensesUrl, 'GET')\r\n      ]);\r\n\r\n      setOrders(fetchedOrders);\r\n      setCosts(fetchedCosts);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const sumAllValues = (dataArray) => {\r\n    if (dataArray.length === 0) return 0; // Проверка на пустой массив\r\n\r\n    return dataArray.reduce((totalSum, obj) => {\r\n      const { id, date, ...rest } = obj;\r\n      const sum = Object.values(rest).reduce((acc, value) => acc + Number(value), 0);\r\n      return totalSum + sum;\r\n    }, 0);\r\n  };\r\n\r\n  const calculateProfit = (ordersArray, costsArray) => {\r\n    if (ordersArray.length === 0 || costsArray.length === 0) return; // Проверка на пустые массивы\r\n\r\n    // Сумма всех заказов\r\n    const totalOrdersSum = ordersArray.reduce((total, order) => {\r\n      const documentSum = Number(order.documentSum);\r\n      return total + documentSum;\r\n    }, 0);\r\n\r\n    // Сумма всех себестоимостей заказов\r\n    const totalCostOfOrders = ordersArray.reduce((total, order) => {\r\n      const cost = Number(order.cost);\r\n      return total + cost;\r\n    }, 0);\r\n\r\n    // Сумма всех расходов\r\n    const totalCosts = sumAllValues(costsArray);\r\n\r\n    // Общая себестоимость\r\n    const totalOverallCost = totalCostOfOrders + totalCosts;\r\n\r\n    // Прибыль\r\n    const profit = totalOrdersSum - totalOverallCost;\r\n\r\n    setMetrics([totalOrdersSum, profit, totalCosts, totalOverallCost]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    calculateProfit(orders, costs);\r\n  }, [orders, costs]);\r\n\r\n  console.log(metrics);\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {columns.map((column, index) => (\r\n              <TableCell key={index}>{column}</TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          <TableRow>\r\n            {metrics.map((metric, index) => (\r\n              <TableCell key={index}>\r\n                <DisplayMetric value={metric} />\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default DisplayMetrics;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}