{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\order_tracking\\\\client\\\\src\\\\components\\\\homePage\\\\trackingStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\nimport { nanoid } from 'nanoid';\nimport TableRowComponent from './TableRowComponent';\nimport { fetchOrders, createOrder, updateOrder, deleteOrder } from '../../utils/backendApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrackingStatus = () => {\n  _s();\n  const columns = [\"Номер заказа\", \"Статус\", \"Дата отправки\"];\n  const initialOrder = {\n    id: nanoid(),\n    orderNumber: \"\",\n    status: \"\",\n    dateCreated: \"\",\n    isNew: true\n  };\n  const [orders, setOrders] = useState([]);\n  const [filterStatus, setFilterStatus] = useState(\"\"); // Состояние для фильтрации по статусу\n  const [filterDate, setFilterDate] = useState(\"\"); // Состояние для фильтрации по дате\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const fetchedOrders = await fetchOrders();\n      setOrders(fetchedOrders);\n    };\n    fetchData();\n  }, []);\n  const existingOrderNumbers = useMemo(() => orders.map(order => order.orderNumber), [orders]);\n  const addRow = () => {\n    setOrders([...orders, {\n      ...initialOrder,\n      isNew: true\n    }]);\n  };\n  const saveRow = useCallback(async data => {\n    const {\n      id,\n      orderNumber,\n      status,\n      dateCreated,\n      isNew\n    } = data;\n    const payload = {\n      id,\n      orderNumber,\n      status,\n      dateCreated\n    };\n    if (isNew) {\n      const response = await createOrder(payload);\n      setOrders(response);\n    } else {\n      const response = await updateOrder(id, payload);\n      setOrders(response);\n    }\n  }, [setOrders]);\n  const deleteRow = useCallback(async (id, isLocal) => {\n    if (isLocal) {\n      setOrders(orders => orders.filter(order => order.id !== id));\n    } else {\n      const response = await deleteOrder(id);\n      setOrders(response);\n    }\n  }, [setOrders]);\n  const handleSortChange = (sortKey, isSorted, filterValue) => {\n    if (sortKey === \"isStatusSorted\" && isSorted) {\n      setFilterStatus(filterValue);\n    } else if (sortKey === \"isDateSorted\" && isSorted) {\n      setFilterDate(filterValue);\n    } else {\n      setFilterStatus(\"\");\n      setFilterDate(\"\");\n    }\n  };\n\n  // Фильтрация заказов на основе filterStatus и filterDate\n  const filteredOrders = orders.filter(order => {\n    return (!filterStatus || order.status === filterStatus) && (!filterDate || order.dateCreated === filterDate);\n  });\n  useEffect(() => {\n    console.log(filterStatus);\n  }, [filterStatus]);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [columns.map((column, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: column\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"contained\",\n              onClick: addRow,\n              children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u0442\\u0440\\u043E\\u043A\\u0443\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: filteredOrders.map(order => /*#__PURE__*/_jsxDEV(TableRowComponent, {\n          id: order.id,\n          data: {\n            ...order,\n            isNew: order.isNew\n          },\n          existingOrderNumbers: existingOrderNumbers,\n          onSave: saveRow,\n          onDelete: isLocal => deleteRow(order.id, isLocal),\n          onSortChange: handleSortChange\n        }, order.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(TrackingStatus, \"nX3dLV715WgfTPRJtE/ZCEbHeQs=\");\n_c = TrackingStatus;\nexport default TrackingStatus;\nvar _c;\n$RefreshReg$(_c, \"TrackingStatus\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Button","nanoid","TableRowComponent","fetchOrders","createOrder","updateOrder","deleteOrder","jsxDEV","_jsxDEV","TrackingStatus","_s","columns","initialOrder","id","orderNumber","status","dateCreated","isNew","orders","setOrders","filterStatus","setFilterStatus","filterDate","setFilterDate","fetchData","fetchedOrders","existingOrderNumbers","map","order","addRow","saveRow","data","payload","response","deleteRow","isLocal","filter","handleSortChange","sortKey","isSorted","filterValue","filteredOrders","console","log","component","children","column","index","fileName","_jsxFileName","lineNumber","columnNumber","color","variant","onClick","onSave","onDelete","onSortChange","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/order_tracking/client/src/components/homePage/trackingStatus.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\r\nimport { nanoid } from 'nanoid';\r\nimport TableRowComponent from './TableRowComponent';\r\nimport { fetchOrders, createOrder, updateOrder, deleteOrder } from '../../utils/backendApi';\r\n\r\nconst TrackingStatus = () => {\r\n  const columns = [\"Номер заказа\", \"Статус\", \"Дата отправки\"];\r\n  const initialOrder = {\r\n    id: nanoid(),\r\n    orderNumber: \"\",\r\n    status: \"\",\r\n    dateCreated: \"\",\r\n    isNew: true\r\n  };\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [filterStatus, setFilterStatus] = useState(\"\"); // Состояние для фильтрации по статусу\r\n  const [filterDate, setFilterDate] = useState(\"\"); // Состояние для фильтрации по дате\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const fetchedOrders = await fetchOrders();\r\n      setOrders(fetchedOrders);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const existingOrderNumbers = useMemo(() => orders.map(order => order.orderNumber), [orders]);\r\n\r\n  const addRow = () => {\r\n    setOrders([...orders, { ...initialOrder, isNew: true }]);\r\n  };\r\n\r\n  const saveRow = useCallback(async (data) => {\r\n    const { id, orderNumber, status, dateCreated, isNew } = data;\r\n    const payload = { id, orderNumber, status, dateCreated };\r\n\r\n    if (isNew) {\r\n      const response = await createOrder(payload);\r\n      setOrders(response);\r\n    } else {\r\n      const response = await updateOrder(id, payload);\r\n      setOrders(response);\r\n    }\r\n  }, [setOrders]);\r\n\r\n  const deleteRow = useCallback(async (id, isLocal) => {\r\n    if (isLocal) {\r\n      setOrders(orders => orders.filter(order => order.id !== id));\r\n    } else {\r\n      const response = await deleteOrder(id);\r\n      setOrders(response);\r\n    }\r\n  }, [setOrders]);\r\n\r\n  const handleSortChange = (sortKey, isSorted, filterValue) => {\r\n    if (sortKey === \"isStatusSorted\" && isSorted) {\r\n      setFilterStatus(filterValue);\r\n    } else if (sortKey === \"isDateSorted\" && isSorted) {\r\n      setFilterDate(filterValue);\r\n    } else {\r\n      setFilterStatus(\"\");\r\n      setFilterDate(\"\");\r\n    }\r\n  };\r\n\r\n  // Фильтрация заказов на основе filterStatus и filterDate\r\n  const filteredOrders = orders.filter(order => {\r\n    return (!filterStatus || order.status === filterStatus) &&\r\n           (!filterDate || order.dateCreated === filterDate);\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(filterStatus);\r\n  }, [filterStatus]);\r\n  \r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {columns.map((column, index) => (\r\n              <TableCell key={index}>{column}</TableCell>\r\n            ))}\r\n            <TableCell>\r\n              <Button color=\"primary\" variant=\"contained\" onClick={addRow}>\r\n                Добавить строку\r\n              </Button>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {filteredOrders.map((order) => (\r\n            <TableRowComponent\r\n              key={order.id}\r\n              id={order.id}\r\n              data={{ ...order, isNew: order.isNew }}\r\n              existingOrderNumbers={existingOrderNumbers}\r\n              onSave={saveRow}\r\n              onDelete={(isLocal) => deleteRow(order.id, isLocal)}\r\n              onSortChange={handleSortChange} \r\n            />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default TrackingStatus;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}