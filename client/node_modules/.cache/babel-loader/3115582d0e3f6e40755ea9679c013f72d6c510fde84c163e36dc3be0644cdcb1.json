{"ast":null,"code":"import { fetchOrders, createOrder, updateOrder, deleteOrder } from './backendApi';\n\n/**\r\n * Handle API requests for various actions like GET, POST, PATCH, and DELETE\r\n * @param {string} type - Type of the HTTP request ('GET', 'POST', 'PATCH', 'DELETE')\r\n * @param {Object} data - Data to be sent with the request\r\n * @param {number} id - Optional ID for PATCH and DELETE requests\r\n * @returns {Promise}\r\n */\nconst handleApiRequest = async (type, data = {}, id = null) => {\n  try {\n    let response;\n    switch (type) {\n      case 'GET':\n        response = await fetchOrders();\n        return response;\n      case 'POST':\n        response = await createOrder(data);\n        return response;\n      case 'PATCH':\n        if (id === null) {\n          throw new Error('No ID provided for PATCH request');\n        }\n        response = await updateOrder(id, data);\n        return response;\n      case 'DELETE':\n        if (id === null) {\n          throw new Error('No ID provided for DELETE request');\n        }\n        response = await deleteOrder(id);\n        return response;\n      default:\n        throw new Error('Unsupported request type');\n    }\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error; // Re-throw to allow error handling in calling context\n  }\n};\nexport default handleApiRequest;","map":{"version":3,"names":["fetchOrders","createOrder","updateOrder","deleteOrder","handleApiRequest","type","data","id","response","Error","error","console"],"sources":["C:/Users/admin/Desktop/магазины/order_tracking/client/src/utils/apiHandler.js"],"sourcesContent":["import { fetchOrders, createOrder, updateOrder, deleteOrder } from './backendApi';\r\n\r\n/**\r\n * Handle API requests for various actions like GET, POST, PATCH, and DELETE\r\n * @param {string} type - Type of the HTTP request ('GET', 'POST', 'PATCH', 'DELETE')\r\n * @param {Object} data - Data to be sent with the request\r\n * @param {number} id - Optional ID for PATCH and DELETE requests\r\n * @returns {Promise}\r\n */\r\nconst handleApiRequest = async (type, data = {}, id = null) => {\r\n  try {\r\n    let response;\r\n\r\n    switch (type) {\r\n      case 'GET':\r\n        response = await fetchOrders();\r\n        return response;\r\n      case 'POST':\r\n        response = await createOrder(data);\r\n        return response;\r\n      case 'PATCH':\r\n        if (id === null) {\r\n          throw new Error('No ID provided for PATCH request');\r\n        }\r\n        response = await updateOrder(id, data);\r\n        return response;\r\n      case 'DELETE':\r\n        if (id === null) {\r\n          throw new Error('No ID provided for DELETE request');\r\n        }\r\n        response = await deleteOrder(id);\r\n        return response;\r\n      default:\r\n        throw new Error('Unsupported request type');\r\n    }\r\n  } catch (error) {\r\n    console.error('API request failed:', error);\r\n    throw error; // Re-throw to allow error handling in calling context\r\n  }\r\n};\r\n\r\nexport default handleApiRequest;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,WAAW,EAAEC,WAAW,EAAEC,WAAW,QAAQ,cAAc;;AAEjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,IAAI,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAEC,EAAE,GAAG,IAAI,KAAK;EAC7D,IAAI;IACF,IAAIC,QAAQ;IAEZ,QAAQH,IAAI;MACV,KAAK,KAAK;QACRG,QAAQ,GAAG,MAAMR,WAAW,CAAC,CAAC;QAC9B,OAAOQ,QAAQ;MACjB,KAAK,MAAM;QACTA,QAAQ,GAAG,MAAMP,WAAW,CAACK,IAAI,CAAC;QAClC,OAAOE,QAAQ;MACjB,KAAK,OAAO;QACV,IAAID,EAAE,KAAK,IAAI,EAAE;UACf,MAAM,IAAIE,KAAK,CAAC,kCAAkC,CAAC;QACrD;QACAD,QAAQ,GAAG,MAAMN,WAAW,CAACK,EAAE,EAAED,IAAI,CAAC;QACtC,OAAOE,QAAQ;MACjB,KAAK,QAAQ;QACX,IAAID,EAAE,KAAK,IAAI,EAAE;UACf,MAAM,IAAIE,KAAK,CAAC,mCAAmC,CAAC;QACtD;QACAD,QAAQ,GAAG,MAAML,WAAW,CAACI,EAAE,CAAC;QAChC,OAAOC,QAAQ;MACjB;QACE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;IAC/C;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK,CAAC,CAAC;EACf;AACF,CAAC;AAED,eAAeN,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}