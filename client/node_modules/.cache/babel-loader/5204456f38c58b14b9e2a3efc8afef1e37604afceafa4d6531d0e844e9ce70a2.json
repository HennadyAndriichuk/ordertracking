{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\\\u043C\\u0430\\u0433\\u0430\\u0437\\u0438\\u043D\\u044B\\\\order_tracking\\\\client\\\\src\\\\components\\\\homePage\\\\OrderNumberInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { nanoid } from 'nanoid';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\nimport TableRowComponent from './TableRowComponent';\nimport { fetchOrders, createOrder, updateOrder } from '../../utils/backendApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrackingStatus = () => {\n  _s();\n  const columns = [\"Номер заказа\", \"Сумма документа\", \"Номер телефона\", \"Полное имя\", \"Себестоимость\", \"Статус\", \"Дата отправки\"];\n  const initialOrder = {\n    orderNumber: \"\",\n    documentAmount: \"\",\n    phoneNumber: \"\",\n    fullName: \"\",\n    costPrice: \"\",\n    status: \"\",\n    shippingDate: \"\",\n    isSorted: false,\n    isNew: true,\n    isChanged: false\n  };\n  const [orders, setOrders] = useState([]);\n  const getOrders = async () => {\n    try {\n      const fetchedOrders = await fetchOrders();\n      const ordersWithIds = fetchedOrders.map(order => ({\n        id: order.id,\n        data: {\n          ...order,\n          isSorted: false,\n          isNew: false,\n          isChanged: false\n        }\n      }));\n      setOrders(ordersWithIds);\n    } catch (error) {\n      console.error('Error fetching orders:', error);\n    }\n  };\n  useEffect(() => {\n    getOrders();\n  }, []);\n  const addRow = () => {\n    setOrders([...orders, {\n      id: nanoid(),\n      data: initialOrder\n    }]);\n  };\n  const saveRow = async (data, rowIndex) => {\n    // Проверка на совпадение номеров заказов\n    const isDuplicate = orders.some((order, index) => index !== rowIndex && order.data.orderNumber === data.orderNumber);\n    if (isDuplicate) {\n      setOrders(prevOrders => {\n        const newOrders = [...prevOrders];\n        newOrders[rowIndex].data = {\n          ...data,\n          error: 'duplicate'\n        };\n        return newOrders;\n      });\n      return;\n    }\n    if (data.orderNumber.length !== 14 || !/^\\d+$/.test(data.orderNumber)) {\n      setOrders(prevOrders => {\n        const newOrders = [...prevOrders];\n        newOrders[rowIndex].data = {\n          ...data,\n          error: 'invalid'\n        };\n        return newOrders;\n      });\n      return;\n    }\n    const {\n      isSorted,\n      isNew,\n      error,\n      isChanged,\n      ...orderData\n    } = data;\n    const newOrders = [...orders];\n    try {\n      if (isNew) {\n        const response = await createOrder(orderData);\n        console.log('Order created:', response);\n        newOrders[rowIndex] = {\n          id: response.id,\n          data: {\n            ...response,\n            isSorted: false,\n            isNew: false,\n            isChanged: false\n          }\n        };\n      } else if (isChanged) {\n        const response = await updateOrder(data.id, orderData);\n        console.log('Order updated:', response);\n        newOrders[rowIndex] = {\n          id: response.id,\n          data: {\n            ...response,\n            isSorted: false,\n            isNew: false,\n            isChanged: false\n          }\n        };\n      }\n      setOrders(newOrders);\n    } catch (error) {\n      console.error('Error saving order:', error);\n    }\n  };\n  const deleteRow = rowIndex => {\n    const newOrders = orders.filter((_, index) => index !== rowIndex);\n    setOrders(newOrders);\n  };\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [columns.map((column, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: column\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"contained\",\n              onClick: addRow,\n              children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u0442\\u0440\\u043E\\u043A\\u0443\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: orders.map((order, index) => /*#__PURE__*/_jsxDEV(TableRowComponent, {\n          id: order.id // Передаем id для PATCH запроса\n          ,\n          data: order.data,\n          onSave: data => saveRow({\n            ...data,\n            id: order.id\n          }, index) // Передаем id для PATCH запроса\n          ,\n          onDelete: () => deleteRow(index),\n          isNew: order.data.isNew\n        }, order.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(TrackingStatus, \"FvMuVccH6DXI6fqfhJiN/VsjZaw=\");\n_c = TrackingStatus;\nexport default TrackingStatus;\nvar _c;\n$RefreshReg$(_c, \"TrackingStatus\");","map":{"version":3,"names":["React","useState","useEffect","nanoid","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Button","TableRowComponent","fetchOrders","createOrder","updateOrder","jsxDEV","_jsxDEV","TrackingStatus","_s","columns","initialOrder","orderNumber","documentAmount","phoneNumber","fullName","costPrice","status","shippingDate","isSorted","isNew","isChanged","orders","setOrders","getOrders","fetchedOrders","ordersWithIds","map","order","id","data","error","console","addRow","saveRow","rowIndex","isDuplicate","some","index","prevOrders","newOrders","length","test","orderData","response","log","deleteRow","filter","_","component","children","column","fileName","_jsxFileName","lineNumber","columnNumber","color","variant","onClick","onSave","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/магазины/order_tracking/client/src/components/homePage/OrderNumberInput.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\r\nimport TableRowComponent from './TableRowComponent';\r\nimport { fetchOrders, createOrder, updateOrder } from '../../utils/backendApi';\r\n\r\nconst TrackingStatus = () => {\r\n  const columns = [\r\n    \"Номер заказа\",\r\n    \"Сумма документа\",\r\n    \"Номер телефона\",\r\n    \"Полное имя\",\r\n    \"Себестоимость\",\r\n    \"Статус\",\r\n    \"Дата отправки\"\r\n  ];\r\n\r\n  const initialOrder = {\r\n    orderNumber: \"\",\r\n    documentAmount: \"\",\r\n    phoneNumber: \"\",\r\n    fullName: \"\",\r\n    costPrice: \"\",\r\n    status: \"\",\r\n    shippingDate: \"\",\r\n    isSorted: false,\r\n    isNew: true,\r\n    isChanged: false\r\n  };\r\n\r\n  const [orders, setOrders] = useState([]);\r\n\r\n  const getOrders = async () => {\r\n    try {\r\n      const fetchedOrders = await fetchOrders();\r\n      const ordersWithIds = fetchedOrders.map(order => ({\r\n        id: order.id,\r\n        data: { ...order, isSorted: false, isNew: false, isChanged: false }\r\n      }));\r\n      setOrders(ordersWithIds);\r\n    } catch (error) {\r\n      console.error('Error fetching orders:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getOrders();\r\n  }, []);\r\n\r\n  const addRow = () => {\r\n    setOrders([...orders, { id: nanoid(), data: initialOrder }]);\r\n  };\r\n\r\n  const saveRow = async (data, rowIndex) => {\r\n    // Проверка на совпадение номеров заказов\r\n    const isDuplicate = orders.some((order, index) => index !== rowIndex && order.data.orderNumber === data.orderNumber);\r\n    if (isDuplicate) {\r\n      setOrders((prevOrders) => {\r\n        const newOrders = [...prevOrders];\r\n        newOrders[rowIndex].data = { ...data, error: 'duplicate' };\r\n        return newOrders;\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (data.orderNumber.length !== 14 || !/^\\d+$/.test(data.orderNumber)) {\r\n      setOrders((prevOrders) => {\r\n        const newOrders = [...prevOrders];\r\n        newOrders[rowIndex].data = { ...data, error: 'invalid' };\r\n        return newOrders;\r\n      });\r\n      return;\r\n    }\r\n\r\n    const { isSorted, isNew, error, isChanged, ...orderData } = data;\r\n    const newOrders = [...orders];\r\n\r\n    try {\r\n      if (isNew) {\r\n        const response = await createOrder(orderData);\r\n        console.log('Order created:', response);\r\n        newOrders[rowIndex] = { id: response.id, data: { ...response, isSorted: false, isNew: false, isChanged: false } };\r\n      } else if (isChanged) {\r\n        const response = await updateOrder(data.id, orderData);\r\n        console.log('Order updated:', response);\r\n        newOrders[rowIndex] = { id: response.id, data: { ...response, isSorted: false, isNew: false, isChanged: false } };\r\n      }\r\n      setOrders(newOrders);\r\n    } catch (error) {\r\n      console.error('Error saving order:', error);\r\n    }\r\n  };\r\n\r\n  const deleteRow = (rowIndex) => {\r\n    const newOrders = orders.filter((_, index) => index !== rowIndex);\r\n    setOrders(newOrders);\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {columns.map((column, index) => (\r\n              <TableCell key={index}>{column}</TableCell>\r\n            ))}\r\n            <TableCell>\r\n              <Button color=\"primary\" variant=\"contained\" onClick={addRow}>\r\n                Добавить строку\r\n              </Button>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {orders.map((order, index) => (\r\n            <TableRowComponent\r\n              key={order.id}\r\n              id={order.id} // Передаем id для PATCH запроса\r\n              data={order.data}\r\n              onSave={(data) => saveRow({ ...data, id: order.id }, index)} // Передаем id для PATCH запроса\r\n              onDelete={() => deleteRow(index)}\r\n              isNew={order.data.isNew}\r\n            />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default TrackingStatus;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}