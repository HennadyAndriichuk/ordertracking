{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\order_tracking\\\\client\\\\src\\\\components\\\\homePage\\\\trackingStatus.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\nimport { nanoid } from 'nanoid';\nimport TableRowComponent from './TableRowComponent';\nimport { fetchApi } from '../../utils/backendApi';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilteredOrders } from '../../features/ordersSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrackingStatus = ({\n  userId\n}) => {\n  _s();\n  const columns = [\"Номер заказа\", \"Статус\", \"Дата получения\", \"Сумма документа\", \"Номер телефона\", \"Себестоимость\"];\n  const initialOrder = {\n    id: nanoid(),\n    userId,\n    orderNumber: \"\",\n    status: \"\",\n    date: \"\",\n    documentSum: \"\",\n    phoneNumber: \"\",\n    cost: \"\",\n    isNew: true,\n    checkedStatuses: {\n      isPhoneNumberChecked: false\n    }\n  };\n  const dispatch = useDispatch();\n  const fetchOrdersUrl = \"http://localhost:4000/orders\";\n  const fetchExpensesUrl = \"http://localhost:4000/expenses\";\n  const [orders, setOrders] = useState([]);\n  const [filterPhoneNumber, setFilterPhoneNumber] = useState(\"\");\n  const {\n    startDate,\n    endDate\n  } = useSelector(state => state.dateRange);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!userId) return; // Не выполнять запрос, если userId нет\n      try {\n        const fetchedOrders = await fetchApi('http://localhost:4000/orders/get-orders', 'POST', null, {\n          userId\n        });\n        setOrders(fetchedOrders.map(order => ({\n          ...order,\n          checkedStatuses: order.checkedStatuses || {\n            isPhoneNumberChecked: false\n          }\n        })));\n      } catch (error) {\n        console.error('Error fetching orders:', error);\n        setOrders([]); // Устанавливаем пустой массив, если произошла ошибка\n      }\n    };\n    fetchData();\n  }, [userId]);\n  useEffect(() => {\n    const fetchData = async () => {\n      if (!userId) return; // Не выполнять запрос, если userId нет\n\n      try {\n        const fetchedCosts = await fetchApi('http://localhost:4000/expenses/get-expenses', 'POST', null, {\n          userId\n        });\n        setCosts(fetchedCosts);\n      } catch (error) {\n        console.error('Error fetching costs:', error);\n        setCosts([]); // Устанавливаем пустой массив, если произошла ошибка\n      }\n      ;\n    };\n    fetchData();\n  }, [userId]);\n  const existingOrderNumbers = useMemo(() => orders.map(order => order.orderNumber), [orders]);\n  const addRow = () => {\n    setOrders([...orders, {\n      ...initialOrder,\n      isNew: true,\n      checkedStatuses: {\n        isPhoneNumberChecked: false\n      }\n    }]);\n  };\n  const saveRow = useCallback(async data => {\n    const {\n      id,\n      orderNumber,\n      status,\n      date,\n      documentSum,\n      phoneNumber,\n      cost,\n      isNew\n    } = data;\n    const payload = {\n      id,\n      orderNumber,\n      status,\n      date,\n      documentSum,\n      phoneNumber,\n      cost,\n      userId\n    };\n    if (isNew) {\n      const response = await fetchApi(fetchOrdersUrl, 'POST', null, payload);\n      setOrders(response);\n    } else {\n      const response = await fetchApi(fetchOrdersUrl, 'PATCH', id, payload);\n      setOrders(response);\n    }\n  }, [setOrders, userId]);\n  const deleteRow = useCallback(async (id, isNew) => {\n    if (isNew) {\n      setOrders(orders => orders.filter(order => order.id !== id));\n    } else {\n      const response = await fetchApi(fetchOrdersUrl, 'DELETE', null, {\n        orderId: id,\n        userId\n      });\n      setOrders(response);\n    }\n  }, [setOrders, userId]);\n  const handleSortChange = (sortKey, isSorted, filterValue, id) => {\n    setOrders(orders.map(order => order.id === id ? {\n      ...order,\n      checkedStatuses: {\n        ...order.checkedStatuses,\n        [sortKey]: isSorted\n      }\n    } : order));\n    if (sortKey === \"isPhoneNumberChecked\" && isSorted) {\n      setFilterPhoneNumber(filterValue);\n    } else {\n      setFilterPhoneNumber(\"\");\n    }\n  };\n  const filteredOrders = orders.filter(order => {\n    const orderDate = new Date(order.date);\n    const isWithinDateRange = (!startDate || orderDate >= new Date(startDate)) && (!endDate || orderDate <= new Date(endDate));\n    return isWithinDateRange && (!filterPhoneNumber || order.phoneNumber === filterPhoneNumber);\n  });\n  useEffect(() => {\n    dispatch(setFilteredOrders(filteredOrders));\n  }, [filteredOrders, dispatch]);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [columns.map((column, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: column\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"contained\",\n              onClick: addRow,\n              disabled: !userId,\n              children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u0442\\u0440\\u043E\\u043A\\u0443\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: userId && filteredOrders.map(order => /*#__PURE__*/_jsxDEV(TableRowComponent, {\n          id: order.id,\n          data: {\n            ...order,\n            isNew: order.isNew\n          },\n          existingOrderNumbers: existingOrderNumbers,\n          onSave: saveRow,\n          onDelete: isNew => deleteRow(order.id, isNew),\n          onSortChange: handleSortChange\n        }, order.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(TrackingStatus, \"FqChCnRTsWtWTtBO9VMViJ5hbzg=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TrackingStatus;\nexport default TrackingStatus;\nvar _c;\n$RefreshReg$(_c, \"TrackingStatus\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useMemo","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Button","nanoid","TableRowComponent","fetchApi","useSelector","useDispatch","setFilteredOrders","jsxDEV","_jsxDEV","TrackingStatus","userId","_s","columns","initialOrder","id","orderNumber","status","date","documentSum","phoneNumber","cost","isNew","checkedStatuses","isPhoneNumberChecked","dispatch","fetchOrdersUrl","fetchExpensesUrl","orders","setOrders","filterPhoneNumber","setFilterPhoneNumber","startDate","endDate","state","dateRange","fetchData","fetchedOrders","map","order","error","console","fetchedCosts","setCosts","existingOrderNumbers","addRow","saveRow","data","payload","response","deleteRow","filter","orderId","handleSortChange","sortKey","isSorted","filterValue","filteredOrders","orderDate","Date","isWithinDateRange","component","children","column","index","fileName","_jsxFileName","lineNumber","columnNumber","color","variant","onClick","disabled","onSave","onDelete","onSortChange","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/order_tracking/client/src/components/homePage/trackingStatus.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\r\nimport { nanoid } from 'nanoid';\r\nimport TableRowComponent from './TableRowComponent';\r\nimport { fetchApi } from '../../utils/backendApi';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setFilteredOrders } from '../../features/ordersSlice';\r\n\r\n\r\nconst TrackingStatus = ({ userId }) => {\r\n  const columns = [\"Номер заказа\", \"Статус\", \"Дата получения\", \"Сумма документа\", \"Номер телефона\", \"Себестоимость\"];\r\n  const initialOrder = {\r\n    id: nanoid(),\r\n    userId,\r\n    orderNumber: \"\",\r\n    status: \"\",\r\n    date: \"\",\r\n    documentSum: \"\",\r\n    phoneNumber: \"\",\r\n    cost: \"\",\r\n    isNew: true,\r\n    checkedStatuses: {\r\n      isPhoneNumberChecked: false\r\n    }\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const fetchOrdersUrl = \"http://localhost:4000/orders\";\r\n  const fetchExpensesUrl = \"http://localhost:4000/expenses\";\r\n\r\n  const [orders, setOrders] = useState([]);\r\n  const [filterPhoneNumber, setFilterPhoneNumber] = useState(\"\");\r\n  const { startDate, endDate } = useSelector((state) => state.dateRange);\r\n  \r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!userId) return; // Не выполнять запрос, если userId нет\r\n      try {\r\n        \r\n        const fetchedOrders = await fetchApi('http://localhost:4000/orders/get-orders', 'POST', null, { userId });\r\n        setOrders(fetchedOrders.map(order => ({\r\n          ...order,\r\n          checkedStatuses: order.checkedStatuses || { isPhoneNumberChecked: false }\r\n        })));\r\n      } catch (error) {\r\n        console.error('Error fetching orders:', error);\r\n        setOrders([]); // Устанавливаем пустой массив, если произошла ошибка\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, [userId]);\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      if (!userId) return; // Не выполнять запрос, если userId нет\r\n\r\n      try{\r\n        const fetchedCosts = await fetchApi('http://localhost:4000/expenses/get-expenses', 'POST', null, { userId });\r\n        setCosts(fetchedCosts);\r\n      }catch (error) {\r\n        console.error('Error fetching costs:', error);\r\n        setCosts([]); // Устанавливаем пустой массив, если произошла ошибка\r\n      };\r\n    };\r\n  \r\n    fetchData();\r\n  }, [userId]);\r\n  \r\n\r\n  const existingOrderNumbers = useMemo(() => orders.map(order => order.orderNumber), [orders]);\r\n\r\n  const addRow = () => {\r\n    setOrders([...orders, { ...initialOrder, isNew: true, checkedStatuses: { isPhoneNumberChecked: false } }]);\r\n  };\r\n\r\n  const saveRow = useCallback(async (data) => {\r\n    const { id, orderNumber, status, date, documentSum, phoneNumber, cost, isNew } = data;\r\n    const payload = { id, orderNumber, status, date, documentSum, phoneNumber, cost, userId };\r\n\r\n    if (isNew) {\r\n      const response = await fetchApi(fetchOrdersUrl, 'POST', null, payload);\r\n      setOrders(response);\r\n    } else {\r\n      const response = await fetchApi(fetchOrdersUrl, 'PATCH', id, payload);\r\n      setOrders(response);\r\n    }\r\n  }, [setOrders, userId]);\r\n\r\n  const deleteRow = useCallback(async (id, isNew) => {\r\n    if (isNew) {\r\n      setOrders(orders => orders.filter(order => order.id !== id));\r\n    } else {\r\n      const response = await fetchApi(fetchOrdersUrl, 'DELETE', null, { orderId: id, userId });\r\n      setOrders(response);\r\n    }\r\n  }, [setOrders, userId]);\r\n\r\n  const handleSortChange = (sortKey, isSorted, filterValue, id) => {\r\n    setOrders(orders.map(order =>\r\n      order.id === id ? { ...order, checkedStatuses: { ...order.checkedStatuses, [sortKey]: isSorted } } : order\r\n    ));\r\n\r\n    if (sortKey === \"isPhoneNumberChecked\" && isSorted) {\r\n      setFilterPhoneNumber(filterValue);\r\n    } else {\r\n      setFilterPhoneNumber(\"\");\r\n    }\r\n  };\r\n\r\n  const filteredOrders = orders.filter(order => {\r\n    const orderDate = new Date(order.date);\r\n    const isWithinDateRange =\r\n      (!startDate || orderDate >= new Date(startDate)) &&\r\n      (!endDate || orderDate <= new Date(endDate));\r\n\r\n    return (\r\n      isWithinDateRange &&\r\n      (!filterPhoneNumber || order.phoneNumber === filterPhoneNumber)\r\n    );\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(setFilteredOrders(filteredOrders));\r\n  }, [filteredOrders, dispatch]);\r\n  \r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {columns.map((column, index) => (\r\n              <TableCell key={index}>\r\n              {column}\r\n            </TableCell>\r\n            ))}\r\n            <TableCell>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={addRow}\r\n                disabled={!userId} \r\n              >\r\n                Добавить строку\r\n              </Button>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {userId && filteredOrders.map((order) => (\r\n            <TableRowComponent\r\n              key={order.id}\r\n              id={order.id}\r\n              data={{ ...order, isNew: order.isNew }}\r\n              existingOrderNumbers={existingOrderNumbers}\r\n              onSave={saveRow}\r\n              onDelete={(isNew) => deleteRow(order.id, isNew)}\r\n              onSortChange={handleSortChange}\r\n            />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default TrackingStatus;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}