{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\\\u043C\\u0430\\u0433\\u0430\\u0437\\u0438\\u043D\\u044B\\\\order_tracking\\\\client\\\\src\\\\components\\\\homePage\\\\tableRowComponent.js\";\nimport React from 'react';\nimport { TableRow, TableCell, Button } from '@mui/material';\nimport InputField from '../homePage/InputField';\n\n// Маркеры определяют тип каждого поля ввода в строке\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst markers = [\"delivery_number\", \"delivery_date\", \"money_amount\", \"text\", \"phone\", \"text\"];\nconst TableRowComponent = ({\n  row,\n  onChange,\n  onDelete\n}) => {\n  const handleInputChange = field => event => {\n    onChange(field, event.target.value, row.id);\n  };\n\n  // Создаем массив ключей из объекта row для доступа к значениям в правильном порядке\n  const rowKeys = Object.keys(row).filter(key => key !== 'id'); // исключаем 'id'\n\n  return /*#__PURE__*/_jsxDEV(TableRow, {\n    children: [rowKeys.map((key, index) => {\n      if (markers[index]) {\n        // Проверяем, есть ли маркер для данного поля\n        return /*#__PURE__*/_jsxDEV(TableCell, {\n          children: /*#__PURE__*/_jsxDEV(InputField, {\n            value: row[key],\n            onChange: handleInputChange(key),\n            marker: markers[index] // передаем маркер в InputField\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 15\n          }, this)\n        }, key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 13\n        }, this);\n      }\n      return null; // Если маркер отсутствует, поле не рендерится\n    }), /*#__PURE__*/_jsxDEV(TableCell, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => onDelete(row.id),\n        color: \"secondary\",\n        variant: \"contained\",\n        children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n_c = TableRowComponent;\nexport default TableRowComponent;\nvar _c;\n$RefreshReg$(_c, \"TableRowComponent\");","map":{"version":3,"names":["React","TableRow","TableCell","Button","InputField","jsxDEV","_jsxDEV","markers","TableRowComponent","row","onChange","onDelete","handleInputChange","field","event","target","value","id","rowKeys","Object","keys","filter","key","children","map","index","marker","fileName","_jsxFileName","lineNumber","columnNumber","onClick","color","variant","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/магазины/order_tracking/client/src/components/homePage/tableRowComponent.js"],"sourcesContent":["import React from 'react';\r\nimport { TableRow, TableCell, Button } from '@mui/material';\r\nimport InputField from '../homePage/InputField';\r\n\r\n// Маркеры определяют тип каждого поля ввода в строке\r\nconst markers = [\"delivery_number\", \"delivery_date\", \"money_amount\", \"text\", \"phone\", \"text\"];\r\n\r\nconst TableRowComponent = ({ row, onChange, onDelete }) => {\r\n  const handleInputChange = (field) => (event) => {\r\n    onChange(field, event.target.value, row.id);\r\n  };\r\n\r\n  // Создаем массив ключей из объекта row для доступа к значениям в правильном порядке\r\n  const rowKeys = Object.keys(row).filter(key => key !== 'id'); // исключаем 'id'\r\n\r\n  return (\r\n    <TableRow>\r\n      {rowKeys.map((key, index) => {\r\n        if (markers[index]) {  // Проверяем, есть ли маркер для данного поля\r\n          return (\r\n            <TableCell key={key}>\r\n              <InputField\r\n                value={row[key]}\r\n                onChange={handleInputChange(key)}\r\n                marker={markers[index]} // передаем маркер в InputField\r\n              />\r\n            </TableCell>\r\n          );\r\n        }\r\n        return null; // Если маркер отсутствует, поле не рендерится\r\n      })}\r\n      <TableCell>\r\n        <Button onClick={() => onDelete(row.id)} color=\"secondary\" variant=\"contained\">\r\n          Удалить\r\n        </Button>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nexport default TableRowComponent;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,eAAe;AAC3D,OAAOC,UAAU,MAAM,wBAAwB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAG,CAAC,iBAAiB,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;AAE7F,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,GAAG;EAAEC,QAAQ;EAAEC;AAAS,CAAC,KAAK;EACzD,MAAMC,iBAAiB,GAAIC,KAAK,IAAMC,KAAK,IAAK;IAC9CJ,QAAQ,CAACG,KAAK,EAAEC,KAAK,CAACC,MAAM,CAACC,KAAK,EAAEP,GAAG,CAACQ,EAAE,CAAC;EAC7C,CAAC;;EAED;EACA,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACX,GAAG,CAAC,CAACY,MAAM,CAACC,GAAG,IAAIA,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;;EAE9D,oBACEhB,OAAA,CAACL,QAAQ;IAAAsB,QAAA,GACNL,OAAO,CAACM,GAAG,CAAC,CAACF,GAAG,EAAEG,KAAK,KAAK;MAC3B,IAAIlB,OAAO,CAACkB,KAAK,CAAC,EAAE;QAAG;QACrB,oBACEnB,OAAA,CAACJ,SAAS;UAAAqB,QAAA,eACRjB,OAAA,CAACF,UAAU;YACTY,KAAK,EAAEP,GAAG,CAACa,GAAG,CAAE;YAChBZ,QAAQ,EAAEE,iBAAiB,CAACU,GAAG,CAAE;YACjCI,MAAM,EAAEnB,OAAO,CAACkB,KAAK,CAAE,CAAC;UAAA;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACzB;QAAC,GALYR,GAAG;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAMR,CAAC;MAEhB;MACA,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,CAAC,eACFxB,OAAA,CAACJ,SAAS;MAAAqB,QAAA,eACRjB,OAAA,CAACH,MAAM;QAAC4B,OAAO,EAAEA,CAAA,KAAMpB,QAAQ,CAACF,GAAG,CAACQ,EAAE,CAAE;QAACe,KAAK,EAAC,WAAW;QAACC,OAAO,EAAC,WAAW;QAAAV,QAAA,EAAC;MAE/E;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEf,CAAC;AAACI,EAAA,GA/BI1B,iBAAiB;AAiCvB,eAAeA,iBAAiB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}