{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\order_tracking\\\\client\\\\src\\\\components\\\\expensesPage\\\\ExpensesTable.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\nimport { nanoid } from 'nanoid';\nimport ExpensesRowComponent from './ExpensesRowComponent';\nimport { fetchApi } from '../../utils/backendApi';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ExpensesTable = ({\n  userId\n}) => {\n  _s();\n  const columns = [\"Дата\", \"Реклама\", \"Затраты на возврат\", \"Затраты на брак\", \"Затраты на хостинг\", \"Другие затраты\"];\n\n  // Начальная структура для новой строки затрат\n  const initialCosts = {\n    id: nanoid(),\n    date: \"\",\n    advertising: \"\",\n    returnCosts: \"\",\n    defectCosts: \"\",\n    hostingCosts: \"\",\n    otherCosts: \"\",\n    userId,\n    isNew: true\n  };\n  const fetchExpensesUrl = \"http://localhost:4000/expenses\";\n\n  // Получаем данные из redux\n  const costsState = useSelector(state => state.costsState || []); // Убедимся, что это массив\n  const {\n    startDate,\n    endDate\n  } = useSelector(state => state.dateRange);\n  const [costs, setCosts] = useState([]);\n\n  // Обновляем состояние costs из costsState при изменении\n  useEffect(() => {\n    if (Array.isArray(costsState)) {\n      setCosts(costsState);\n    } else {\n      console.error('costsState is not an array:', costsState);\n    }\n  }, [costsState]);\n\n  // Добавление новой строки\n  const addRow = () => {\n    setCosts([...costs, {\n      ...initialCosts,\n      isNew: true\n    }]);\n  };\n\n  // Сохранение строки (POST или PATCH)\n  const saveRow = useCallback(async data => {\n    const {\n      id,\n      date,\n      advertising,\n      returnCosts,\n      defectCosts,\n      hostingCosts,\n      otherCosts,\n      isNew\n    } = data;\n    const payload = {\n      id,\n      date,\n      advertising,\n      returnCosts,\n      defectCosts,\n      hostingCosts,\n      otherCosts,\n      userId\n    };\n    try {\n      let response;\n      if (isNew) {\n        response = await fetchApi(fetchExpensesUrl, 'POST', null, payload);\n      } else {\n        response = await fetchApi(fetchExpensesUrl, 'PATCH', id, payload);\n      }\n      // Проверяем, является ли response массивом, перед обновлением состояния\n      if (Array.isArray(response)) {\n        setCosts(response);\n      } else {\n        console.error('Server response is not an array:', response);\n      }\n    } catch (error) {\n      console.error('Error saving row:', error);\n    }\n  }, [setCosts, userId]);\n\n  // Удаление строки\n  const deleteRow = useCallback(async (id, isNew) => {\n    if (isNew) {\n      setCosts(costs => costs.filter(cost => cost.id !== id));\n    } else {\n      try {\n        const response = await fetchApi(fetchExpensesUrl, 'DELETE', null, {\n          expenseId: id,\n          userId\n        });\n        if (Array.isArray(response)) {\n          setCosts(response);\n        } else {\n          console.error('Server response is not an array:', response);\n        }\n      } catch (error) {\n        console.error('Error deleting row:', error);\n      }\n    }\n  }, [setCosts, userId]);\n\n  // Фильтрация по диапазону дат\n  const filteredCosts = costs.filter(cost => {\n    const costDate = new Date(cost.date);\n    // Проверка валидности даты\n    if (isNaN(costDate)) {\n      return false;\n    }\n    const isWithinDateRange = (!startDate || costDate >= new Date(startDate)) && (!endDate || costDate <= new Date(endDate));\n    return isWithinDateRange;\n  });\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: [columns.map((column, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n            children: column\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(TableCell, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              variant: \"contained\",\n              onClick: addRow,\n              disabled: !userId,\n              children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C \\u0441\\u0442\\u0440\\u043E\\u043A\\u0443\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: filteredCosts.map(cost => /*#__PURE__*/_jsxDEV(ExpensesRowComponent, {\n          id: cost.id,\n          data: {\n            ...cost,\n            isNew: cost.isNew\n          },\n          onSave: saveRow,\n          onDelete: isNew => deleteRow(cost.id, isNew)\n        }, cost.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(ExpensesTable, \"/0KXTB3CTJt1S3ws2lBx4NH8zNk=\", false, function () {\n  return [useSelector, useSelector];\n});\n_c = ExpensesTable;\nexport default ExpensesTable;\nvar _c;\n$RefreshReg$(_c, \"ExpensesTable\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Button","nanoid","ExpensesRowComponent","fetchApi","useSelector","jsxDEV","_jsxDEV","ExpensesTable","userId","_s","columns","initialCosts","id","date","advertising","returnCosts","defectCosts","hostingCosts","otherCosts","isNew","fetchExpensesUrl","costsState","state","startDate","endDate","dateRange","costs","setCosts","Array","isArray","console","error","addRow","saveRow","data","payload","response","deleteRow","filter","cost","expenseId","filteredCosts","costDate","Date","isNaN","isWithinDateRange","component","children","map","column","index","fileName","_jsxFileName","lineNumber","columnNumber","color","variant","onClick","disabled","onSave","onDelete","_c","$RefreshReg$"],"sources":["C:/Users/admin/Desktop/order_tracking/client/src/components/expensesPage/ExpensesTable.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\r\nimport { Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Button } from '@mui/material';\r\nimport { nanoid } from 'nanoid';\r\nimport ExpensesRowComponent from './ExpensesRowComponent';\r\nimport { fetchApi } from '../../utils/backendApi';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst ExpensesTable = ({ userId }) => {\r\n  const columns = [\"Дата\", \"Реклама\", \"Затраты на возврат\", \"Затраты на брак\", \"Затраты на хостинг\", \"Другие затраты\"];\r\n  \r\n  // Начальная структура для новой строки затрат\r\n  const initialCosts = {\r\n    id: nanoid(),\r\n    date: \"\",\r\n    advertising: \"\",\r\n    returnCosts: \"\",\r\n    defectCosts: \"\",\r\n    hostingCosts: \"\",\r\n    otherCosts: \"\",\r\n    userId,\r\n    isNew: true\r\n  };\r\n\r\n  const fetchExpensesUrl = \"http://localhost:4000/expenses\";\r\n  \r\n  // Получаем данные из redux\r\n  const costsState = useSelector((state) => state.costsState || []); // Убедимся, что это массив\r\n  const { startDate, endDate } = useSelector((state) => state.dateRange);\r\n\r\n  const [costs, setCosts] = useState([]);\r\n\r\n  // Обновляем состояние costs из costsState при изменении\r\n  useEffect(() => {\r\n    if (Array.isArray(costsState)) {\r\n      setCosts(costsState);\r\n    } else {\r\n      console.error('costsState is not an array:', costsState);\r\n    }\r\n  }, [costsState]);\r\n\r\n  // Добавление новой строки\r\n  const addRow = () => {\r\n    setCosts([...costs, { ...initialCosts, isNew: true }]);\r\n  };\r\n\r\n  // Сохранение строки (POST или PATCH)\r\n  const saveRow = useCallback(async (data) => {\r\n    const { id, date, advertising, returnCosts, defectCosts, hostingCosts, otherCosts, isNew } = data;\r\n    const payload = { id, date, advertising, returnCosts, defectCosts, hostingCosts, otherCosts, userId };\r\n\r\n    try {\r\n      let response;\r\n      if (isNew) {\r\n        response = await fetchApi(fetchExpensesUrl, 'POST', null, payload);\r\n      } else {\r\n        response = await fetchApi(fetchExpensesUrl, 'PATCH', id, payload);\r\n      }\r\n      // Проверяем, является ли response массивом, перед обновлением состояния\r\n      if (Array.isArray(response)) {\r\n        setCosts(response);\r\n      } else {\r\n        console.error('Server response is not an array:', response);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving row:', error);\r\n    }\r\n  }, [setCosts, userId]);\r\n\r\n  // Удаление строки\r\n  const deleteRow = useCallback(async (id, isNew) => {\r\n    if (isNew) {\r\n      setCosts(costs => costs.filter(cost => cost.id !== id));\r\n    } else {\r\n      try {\r\n        const response = await fetchApi(fetchExpensesUrl, 'DELETE', null, { expenseId: id, userId });\r\n        if (Array.isArray(response)) {\r\n          setCosts(response);\r\n        } else {\r\n          console.error('Server response is not an array:', response);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error deleting row:', error);\r\n      }\r\n    }\r\n  }, [setCosts, userId]);\r\n\r\n  // Фильтрация по диапазону дат\r\n  const filteredCosts = costs.filter(cost => {\r\n    const costDate = new Date(cost.date);\r\n    // Проверка валидности даты\r\n    if (isNaN(costDate)) {\r\n      return false;\r\n    }\r\n    const isWithinDateRange =\r\n      (!startDate || costDate >= new Date(startDate)) &&\r\n      (!endDate || costDate <= new Date(endDate));\r\n\r\n    return isWithinDateRange;\r\n  });\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table>\r\n        <TableHead>\r\n          <TableRow>\r\n            {columns.map((column, index) => (\r\n              <TableCell key={index}>{column}</TableCell>\r\n            ))}\r\n            <TableCell>\r\n              <Button\r\n                color=\"primary\"\r\n                variant=\"contained\"\r\n                onClick={addRow}\r\n                disabled={!userId}\r\n              >\r\n                Добавить строку\r\n              </Button>\r\n            </TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {filteredCosts.map((cost) => (\r\n            <ExpensesRowComponent\r\n              key={cost.id}\r\n              id={cost.id}\r\n              data={{ ...cost, isNew: cost.isNew }}\r\n              onSave={saveRow}\r\n              onDelete={(isNew) => deleteRow(cost.id, isNew)}\r\n            />\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default ExpensesTable;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}